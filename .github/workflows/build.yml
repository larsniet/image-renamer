name: Build and Release

on:
  push:
    tags:
      - 'v*'

# Add global permissions that apply to all jobs
permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Image Renamer ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Image Renamer ${{ github.ref_name }}
            
            A simple, elegant tool for renaming your images based on their creation date.
            
            ### 📥 Downloads
            
            Choose the version for your operating system:
            
            - **Windows**: Download `imagerenamer-windows.exe` and double-click to run
            - **macOS**: Download `imagerenamer-macos.zip`, extract and open the app
              - ⚠️ **Security Warning**: When opening for the first time, right-click (or Ctrl+click) on "Image Renamer.app" and select "Open" from the menu. Then click "Open" in the security dialog. This is required even though the app is properly signed and notarized.
            - **Linux**: Download `imagerenamer-linux` and run it from the terminal
              - Make executable first: `chmod +x imagerenamer-linux`
            
            ### Changes in this version
            
            _See the automatically generated release notes below for details on changes_
          
  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyQt6
          
      - name: Ensure resources directory
        run: |
          if (-not (Test-Path -Path "resources")) {
            New-Item -ItemType Directory -Path "resources"
          }
          if (-not (Test-Path -Path "resources\icon.png")) {
            # Use a fallback icon if the new logo doesn't exist
            python -c "from PIL import Image; img = Image.new('RGB', (64, 64), color=(13, 99, 156)); img.save('resources/icon.ico')"
          } else {
            # Resize the icon to ensure consistent size
            python -c "from PIL import Image; img = Image.open('resources/icon.png'); img = img.resize((256, 256), Image.LANCZOS); img.save('resources/icon.ico')"
          }
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name=imagerenamer --onefile --windowed --add-data="LICENSE;." --icon=resources/icon.ico imagerenamer/gui.py
          
      - name: Prepare Assets
        run: |
          # Make a copy with a more descriptive name
          Copy-Item -Path "dist\imagerenamer.exe" -Destination "imagerenamer-windows.exe"
          
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            imagerenamer-windows.exe
          
  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyQt6
          
      - name: Ensure resources directory
        run: |
          mkdir -p resources
          if [ ! -f "resources/icon.png" ]; then
            # Create a fallback icon if it doesn't exist
            python -c "from PIL import Image; img = Image.new('RGB', (64, 64), color=(13, 99, 156)); img.save('resources/icon.png')"
          fi
          
          # Resize the icon to 1024x1024 to ensure consistent size
          python -c "from PIL import Image; img = Image.open('resources/icon.png'); img = img.resize((1024, 1024), Image.LANCZOS); img.save('resources/icon_resized.png')"
          
          # Convert PNG to ICNS format for better macOS integration
          mkdir -p macOS.iconset
          sips -z 16 16     resources/icon_resized.png --out macOS.iconset/icon_16x16.png
          sips -z 32 32     resources/icon_resized.png --out macOS.iconset/icon_16x16@2x.png
          sips -z 32 32     resources/icon_resized.png --out macOS.iconset/icon_32x32.png
          sips -z 64 64     resources/icon_resized.png --out macOS.iconset/icon_32x32@2x.png
          sips -z 128 128   resources/icon_resized.png --out macOS.iconset/icon_128x128.png
          sips -z 256 256   resources/icon_resized.png --out macOS.iconset/icon_128x128@2x.png
          sips -z 256 256   resources/icon_resized.png --out macOS.iconset/icon_256x256.png
          sips -z 512 512   resources/icon_resized.png --out macOS.iconset/icon_256x256@2x.png
          sips -z 512 512   resources/icon_resized.png --out macOS.iconset/icon_512x512.png
          sips -z 1024 1024 resources/icon_resized.png --out macOS.iconset/icon_512x512@2x.png
          iconutil -c icns macOS.iconset -o resources/icon.icns
          
      - name: Build with PyInstaller
        run: |
          # Use a more complete spec for macOS
          echo "# -*- mode: python ; coding: utf-8 -*-
          block_cipher = None
          
          a = Analysis(
              ['imagerenamer/gui.py'],
              pathex=[],
              binaries=[],
              datas=[('LICENSE', '.')],
              hiddenimports=[],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='imagerenamer',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              console=False,
              disable_windowed_traceback=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
              icon='resources/icon.icns',
          )
          
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              upx_exclude=[],
              name='imagerenamer',
          )
          
          app = BUNDLE(
              coll,
              name='Image Renamer.app',
              icon='resources/icon.icns',
              bundle_identifier='com.larsniet.imagerenamer',
              info_plist={
                  'CFBundleDisplayName': 'Image Renamer',
                  'CFBundleShortVersionString': '${GITHUB_REF_NAME#v}',
                  'NSHighResolutionCapable': 'True',
                  'LSApplicationCategoryType': 'public.app-category.utilities',
                  'NSHumanReadableCopyright': '© 2023 Lars Niet'
              },
          )" > macOS.spec
          
          # Build using the spec file
          pyinstaller macOS.spec
      
      - name: Setup Code Signing
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_P12_PASSWORD: ${{ secrets.MACOS_P12_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          MACOS_DEVELOPER_ID: ${{ secrets.MACOS_DEVELOPER_ID }}
        run: |
          # Skip certificate-based signing if any required secret is missing
          if [ -z "$MACOS_CERTIFICATE_BASE64" ] || [ -z "$MACOS_DEVELOPER_ID" ]; then
            echo "Certificate or Developer ID not provided - using ad-hoc signing instead"
            echo "Signing the application with ad-hoc identity (no Apple verification)"
            codesign --force --deep --sign - "dist/Image Renamer.app"
            echo "Ad-hoc signing completed successfully"
            
            echo "Creating zip file for distribution..."
            cd dist
            zip -r ../imagerenamer-macos.zip "Image Renamer.app"
            cd ..
            echo "ZIP file created successfully."
            exit 0
          fi
          
          # Use a simple approach - one attempt with password, then fallback to ad-hoc
          echo "Setting up for code signing..."
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          CERT_PATH=$RUNNER_TEMP/certificate.p12
          
          # Create keychain
          echo "Creating temporary keychain..."
          security create-keychain -p "temporary-password" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "temporary-password" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          
          # Decode certificate
          echo "Decoding certificate..."
          echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > $CERT_PATH
          
          # Import certificate (single attempt)
          echo "Importing certificate..."
          if [ -n "$MACOS_P12_PASSWORD" ]; then
            # Try with provided password
            if ! security import $CERT_PATH -P "$MACOS_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
              echo "Certificate import failed - using ad-hoc signing instead"
              codesign --force --deep --sign - "dist/Image Renamer.app"
              echo "Ad-hoc signing completed successfully"
              cd dist
              zip -r ../imagerenamer-macos.zip "Image Renamer.app"
              cd ..
              exit 0
            fi
          else
            # Try without password
            if ! security import $CERT_PATH -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
              echo "Certificate import failed - using ad-hoc signing instead"
              codesign --force --deep --sign - "dist/Image Renamer.app"
              echo "Ad-hoc signing completed successfully"
              cd dist
              zip -r ../imagerenamer-macos.zip "Image Renamer.app"
              cd ..
              exit 0
            fi
          fi
          
          # Set partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temporary-password" $KEYCHAIN_PATH
          
          # Check available identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          
          # Create entitlements file for hardened runtime
          echo '<?xml version="1.0" encoding="UTF-8"?>' > entitlements.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> entitlements.plist
          echo '<plist version="1.0">' >> entitlements.plist
          echo '<dict>' >> entitlements.plist
          echo '    <key>com.apple.security.cs.allow-jit</key>' >> entitlements.plist
          echo '    <true/>' >> entitlements.plist
          echo '    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>' >> entitlements.plist
          echo '    <true/>' >> entitlements.plist
          echo '    <key>com.apple.security.cs.disable-library-validation</key>' >> entitlements.plist
          echo '    <true/>' >> entitlements.plist
          echo '    <key>com.apple.security.cs.disable-executable-page-protection</key>' >> entitlements.plist
          echo '    <true/>' >> entitlements.plist
          # Only add the entitlement for user-selected files
          echo '    <key>com.apple.security.files.user-selected.read-write</key>' >> entitlements.plist
          echo '    <true/>' >> entitlements.plist
          echo '</dict>' >> entitlements.plist
          echo '</plist>' >> entitlements.plist

          # Sign the app
          echo "Signing app with Developer ID: $MACOS_DEVELOPER_ID"
          # First, sign all dynamic libraries and binaries inside the app
          find "dist/Image Renamer.app" -type f -name "*.dylib" -o -name "*.so" | while read file; do
            echo "Signing binary component: $file"
            codesign --force --options runtime --sign "$MACOS_DEVELOPER_ID" --timestamp "$file" || echo "Warning: Failed to sign $file"
          done
          
          # Look for any other executable files like Python binary
          find "dist/Image Renamer.app" -type f -perm +111 -not -path "*/\.*" | while read file; do
            if file "$file" | grep -q "executable"; then
              echo "Signing executable: $file"
              codesign --force --options runtime --sign "$MACOS_DEVELOPER_ID" --timestamp "$file" || echo "Warning: Failed to sign $file"
            fi
          done
          
          # Finally sign the entire app with entitlements
          if ! codesign --force --options runtime --sign "$MACOS_DEVELOPER_ID" --timestamp --deep --entitlements entitlements.plist "dist/Image Renamer.app"; then
            echo "Code signing failed - falling back to ad-hoc signing"
            codesign --force --deep --sign - "dist/Image Renamer.app"
          fi
          
          # Verify signature
          codesign --verify --verbose "dist/Image Renamer.app" || echo "Verification failed, but continuing"
          
          # Create final zip
          echo "Creating final distributable ZIP..."
          cd dist
          ditto -c -k --keepParent "Image Renamer.app" "../imagerenamer-macos.zip"
          cd ..
          echo "ZIP file created successfully with all permissions and attributes preserved."
      
      - name: Debug Environment Variables
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
          MACOS_APPLE_PASSWORD: ${{ secrets.MACOS_APPLE_PASSWORD }}
          MACOS_APPLE_TEAM_ID: ${{ secrets.MACOS_APPLE_TEAM_ID }}
        run: |
          echo "Checking environment variables:"
          echo "MACOS_CERTIFICATE_BASE64 is set: $([[ -n "$MACOS_CERTIFICATE_BASE64" ]] && echo 'YES' || echo 'NO')"
          echo "MACOS_APPLE_ID is set: $([[ -n "$MACOS_APPLE_ID" ]] && echo 'YES' || echo 'NO')"
          echo "  - First character: ${MACOS_APPLE_ID:0:1}"
          echo "  - Last character: ${MACOS_APPLE_ID: -1}"
          echo "  - Length: ${#MACOS_APPLE_ID}"
          
          echo "MACOS_APPLE_PASSWORD is set: $([[ -n "$MACOS_APPLE_PASSWORD" ]] && echo 'YES' || echo 'NO')"
          echo "  - First character: ${MACOS_APPLE_PASSWORD:0:1}"
          echo "  - Last character: ${MACOS_APPLE_PASSWORD: -1}"
          echo "  - Length: ${#MACOS_APPLE_PASSWORD}"
          
          echo "MACOS_APPLE_TEAM_ID is set: $([[ -n "$MACOS_APPLE_TEAM_ID" ]] && echo 'YES' || echo 'NO')"
          echo "  - First character: ${MACOS_APPLE_TEAM_ID:0:1}"
          echo "  - Last character: ${MACOS_APPLE_TEAM_ID: -1}"
          echo "  - Length: ${#MACOS_APPLE_TEAM_ID}"
          
      - name: Notarize App
        if: env.MACOS_APPLE_ID != '' && env.MACOS_APPLE_PASSWORD != '' && env.MACOS_APPLE_TEAM_ID != ''
        env:
          MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
          MACOS_APPLE_PASSWORD: ${{ secrets.MACOS_APPLE_PASSWORD }}
          MACOS_APPLE_TEAM_ID: ${{ secrets.MACOS_APPLE_TEAM_ID }}
        run: |
          echo "Starting notarization process..."
          
          # Validate Apple ID related environment variables
          if [ -z "$MACOS_APPLE_ID" ] || [ -z "$MACOS_APPLE_PASSWORD" ] || [ -z "$MACOS_APPLE_TEAM_ID" ]; then
            echo "Error: Apple ID, password or team ID is not set. Skipping notarization."
            exit 0
          fi
          
          echo "Creating zip file for notarization..."
          ditto -c -k --keepParent "dist/Image Renamer.app" "Image Renamer.zip"
          
          echo "Submitting app for notarization with Team ID: $MACOS_APPLE_TEAM_ID"
          # Submit for notarization and wait for completion
          xcrun notarytool submit "Image Renamer.zip" \
            --apple-id "$MACOS_APPLE_ID" \
            --password "$MACOS_APPLE_PASSWORD" \
            --team-id "$MACOS_APPLE_TEAM_ID" \
            --wait > notarization_output.txt

          # Extract submission ID
          SUBMISSION_ID=$(cat notarization_output.txt | grep "id:" | head -1 | awk '{print $2}')
          echo "Notarization completed with submission ID: $SUBMISSION_ID"
          
          # Get detailed log information
          echo "Fetching detailed notarization log..."
          xcrun notarytool log "$SUBMISSION_ID" \
            --apple-id "$MACOS_APPLE_ID" \
            --password "$MACOS_APPLE_PASSWORD" \
            --team-id "$MACOS_APPLE_TEAM_ID" > notarization_log.txt
            
          cat notarization_log.txt
          
          # Check the notarization status
          NOTARIZE_STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$MACOS_APPLE_ID" \
            --password "$MACOS_APPLE_PASSWORD" \
            --team-id "$MACOS_APPLE_TEAM_ID" | grep "status:" | awk '{print $2}')
          
          if [ "$NOTARIZE_STATUS" = "Accepted" ]; then
            echo "Notarization succeeded! Stapling notarization ticket to the app..."
            # Staple the ticket to the app
            xcrun stapler staple "dist/Image Renamer.app"
            # Verify stapling was successful
            echo "Verifying staple was applied correctly..."
            xcrun stapler validate -v "dist/Image Renamer.app"
            # Check if the app is ready to run by querying its status
            echo "Checking final app status with spctl..."
            spctl --assess --verbose=4 --type exec "dist/Image Renamer.app" || echo "Warning: spctl verification failed, but continuing"
            
            # Additional verification and diagnostics
            echo "Checking code signature details..."
            codesign -dvv "dist/Image Renamer.app" || echo "Warning: Detailed verification failed, but continuing"
            
            echo "Verifying with strict assessment..."
            spctl --assess --verbose=4 --type exec --context context:primary-signature "dist/Image Renamer.app" || echo "Warning: Strict verification failed, but continuing"
            
            echo "Stapling complete!"
          else
            echo "Warning: Notarization failed. Will still create the zip file, but the app may show security warnings."
          fi
          
          echo "Creating final distributable ZIP..."
          cd dist
          ditto -c -k --keepParent "Image Renamer.app" "../imagerenamer-macos.zip"
          cd ..
          echo "ZIP file created successfully with all permissions and attributes preserved."
          
      - name: Create Unsigned ZIP Archive (Fallback)
        if: env.MACOS_CERTIFICATE_BASE64 == '' || failure()
        run: |
          echo "Creating unsigned ZIP archive as fallback..."
          cd dist
          ditto -c -k --keepParent "Image Renamer.app" "../imagerenamer-macos.zip"
          cd ..
          echo "Unsigned ZIP file created successfully with all permissions and attributes preserved."
          
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            imagerenamer-macos.zip
          
  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev qttools5-dev-tools
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyQt6
          
      - name: Ensure resources directory
        run: |
          mkdir -p resources
          if [ ! -f "resources/icon.png" ]; then
            # Create a fallback icon if it doesn't exist
            python -c "from PIL import Image; img = Image.new('RGB', (64, 64), color=(13, 99, 156)); img.save('resources/icon.png')"
          else
            # Resize the icon to ensure consistent size for Linux
            python -c "from PIL import Image; img = Image.open('resources/icon.png'); img = img.resize((256, 256), Image.LANCZOS); img.save('resources/icon_256.png')"
            mv resources/icon_256.png resources/icon.png
          fi
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name=imagerenamer --onefile --add-data="LICENSE:." imagerenamer/gui.py
          
      - name: Prepare Assets
        run: |
          # Copy with a more descriptive name
          cp dist/imagerenamer imagerenamer-linux
          chmod +x imagerenamer-linux
          
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            imagerenamer-linux
            



